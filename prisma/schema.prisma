generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  // providertype        String
  // providerId          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  // access_TokenExpires DateTime?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // createAt            DateTime  @default(now())
  // updateAt            DateTime  @updatedAt
  // user User @relation(fields: [userId], references: [id])
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  // accesToken   String   @unique
  // createdAt    DateTime @default(now())
  // updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// model User {
//   id            String     @id @default(cuid())
//   name          String?
//   email         String     @unique
//   emailVerified DateTime?
//   image         String?
//   createdAt     DateTime   @default(now())
//   updateAt      DateTime   @updatedAt
//   accounts      Account[]
//   sessions      Session[]
//   purchases     Purchase[]
//   // Optional for WebAuthn support
//   // Authenticator Authenticator[]
//   // createdAt DateTime @default(now())
//   // updatedAt DateTime @updatedAt
// }
model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Purchase      Purchase[]

  // @@map("users")
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //Cascade指定によって親(User側に依存する)
  // access_token      String?
  // expires_at        Int?
  // token_type        String?
  // scope             String?
  // id_token          String?
  // session_state     String?
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@id([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  // @@map("verification_tokens")

  @@unique([identifier, token])
}

// model VerificationRequest {
//   id         String   @id @default(cuid())
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }
