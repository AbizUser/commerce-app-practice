generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                  String    @id @default(cuid())
  userId              String
  providertype        String
  providerId          String
  providerAccountId   String
  refreshToken        String?
  access_Token        String?
  access_TokenExpires DateTime?
  createAt            DateTime  @default(now())
  updateAt            DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id])

  // expires_at          Int?
  // token_type        String?
  // scope             String?
  // id_token          String?
  // session_state String?
  // createdAt     DateTime @default(now())
  // updatedAt     DateTime @updatedAt
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accesToken   String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  // user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updateAt      DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  purchases     Purchase[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) //Cascade指定によって親(User側に依存する)
  // access_token      String?
  // expires_at        Int?
  // token_type        String?
  // scope             String?
  // id_token          String?
  // session_state     String?
  // createdAt DateTime @default(now())
  // updatedAt DateTime @updatedAt
  // user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@id([provider, providerAccountId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
